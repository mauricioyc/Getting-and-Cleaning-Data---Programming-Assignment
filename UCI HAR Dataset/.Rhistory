rnorm()
rnorm
install.packages("ggplot2")
install.packages("devtools")
library(devtools)
find_rtools()
library("devrools")
devtools
help rbind()
swirl()
libbrary(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- fflags[,11:17]
flags_colors <- flags[,11:17]
flag_colors <- flags[,11:17]
head(flag_colors)
View(flags)
View(flags)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes < flags[,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range())
lapply(flag_shapes, range
)
shape_mat<- sapply(flag_shapes, range())
shape_mat<- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem [2])
sapply(flags,unique)
vapply(flags, unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tappla(flags$population,flags$red,summary())
tappla(flags$population,flags$red,summary
)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
iris
lapply(iris,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x<-tapply(mtcars$hp, mtcars$cyl, mean)
x
x[1]
x[3]-x[1]
debug(ls)
n
ls
exit
mtcars
?mtcars
sapply(split)
debug()
exit()
e
q
quit
a
mtcars
split(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl,mean))
Q
library(datasets)
data("mtcars")
data(mtcars)
mtcars
split(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl,mean))
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
set(c(1,2,3))
makeVector(x<-c(1,2,3,4))
x
x<-c(1,2,3,4)
x$getmean()
x<-makeVector(c(1,2,3,4))
x
x
x$get()
x$getmean()
x$setmean(1)
x$getmean()
m
cachemean(x)
cachemean(x,2)
x$set(c(1,2,3,4))
cachemean(x,2)
cachemean(x,2)
cachemean(x)
x$set(c(1,2,3,4))
cachemean(x)
a<- matrix(c(2,2,2,2),2,2)
a
solva(a)
solve(a)
a<- matrix(c(1,2,1,2),2,2)
a
solve(a)
a<- matrix(c(1,2,3,0),2,2)
solve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) invm <<- inverse
getinv <- function() invm
list(set = set, get = get,
setmean = setinv,
getmean = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
invm <- x$getinv()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data, ...)
x$setinv(invm)
invm
}
a
cacheSolve(a)
cachemean(x)
View(cachemean)
View(cachemean)
View(cacheSolve)
View(cacheSolve)
View(makeVector)
View(makeVector)
makeCacheMatrix(a)
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) invm <<- inverse
getinv <- function() invm
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
invm <- x$getinv()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data, ...)
x$setinv(invm)
invm
}
cacheSolve(a)
makeCacheMatrix(a)
a<- matrix(c(1,2,3,0),2,2)
makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
invm <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inverse) invm <<- inverse
getinv <- function() invm
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
invm <- x$getinv()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data, ...)
x$setinv(invm)
invm
}
makeCacheMatrix(a)
cacheSolve(a)
a<-c(1,2,3,4)
cacheSolve(a)
a<- matrix(c(1,2,3,0),2,2)
makeCacheMatrix(a)
x<-makeCacheMatrix(a)
x
x$get()
x$get(
)
x$getinv()
x<-makeCacheMatrix(a)
cacheSolve(x)
cacheSolve(x)
install.packages("RMySQL",type = "source")
?dbbConnect
?dbConnect
library(RMySQL)
library("RMySQL")
R.home()
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
setwd("D:/Data Science Coursera/Course 3/Week 4")
data1<-read.csv("data1.csv")
head(data1)
names <- names(data1)
head(names)
strsplit
?strsplit
strsplit(names)
names2 <- strsplit(names,"wtgp")
names2
names2 <- strsplit(names,"wgtp")
head(names2)
tail(names2)
names2[123]
data2<-read.csv("data2.csv")
head(data2)
data2<-read.csv("data2.csv",skip = 4)
data2
head(data2)
summary(data2)
data2<-read.csv("data2.csv",skip = 4, colClasses = "character")
god<-gsub(",","",data2$X.4)
god
god<-as.numeric(gsub(",","",data2$X.4))
god
mean(god, na.rm = T)
mean(god)
god<-god[1:190]
god
mean(god)
data2<-read.csv("data2.csv",skip = 4, colClasses = "character",nrows = 190)
tail(data2)
grep("^United",countryNames)
grep("^United",data2$X.3)
grep("*United",data2$X.3)
grep("United$",data2$X.3)
data3 <-read.csv("data3.csv")
head(data3)
summary(data3)
View(data2)
View(data2)
mereg <- merge(data2,data3,by.x = data2$X,by.y = data3$CountryCode)
mereg <- merge(data2,data3,by.x = "X",by.y = "CountryCode")
head(mereg)
nrow(mereg)
View(mereg)
View(mereg)
grep("[Jj]une$",mereg)
grep("5$",mereg)
mereg <- merge(data2,data3,by.x = "X",by.y = "CountryCode", all = T)
grep("[Jj]une$",mereg$Special.Notes)
grep("[Jj]une",mereg$Special.Notes)
x<-grep("[Jj]une",mereg$Special.Notes)
mereg$Special.Notes[x]
x<-grep("(Fiscal year end:)+[Jj]une",mereg$Special.Notes)
x
x<-grep("(Fiscal year end:)+.*+[Jj]une",mereg$Special.Notes)
x<-grep("(Fiscal year end:)+(.*)+[Jj]une",mereg$Special.Notes)
x
legth(x)
length(x)
mereg$Special.Notes[x]
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
summary(amzn)
summary(sampleTimes)
sampleTimes
x<-as.Date(sampleTimes,"%Y%b%d")
x
year()
library("lubridate")
install.packages("lubridate")
library(lubridate)
year(x)
x[year(x)==2012]
leength(x[year(x)==2012])
length(x[year(x)==2012])
weekdays(x)
x[weekdays(x)=="segunda-feira"]
length(x[weekdays(x)=="segunda-feira"])
length(x[weekdays(x)=="segunda-feira"&year(x)==2012])
library(swirl)
swirl()
Sys.getlocale(category = "LC_TIME")
libbrary(lubridate)
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("19-20-12")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14"
)
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hours = hour(now()), minutes = minute(now()))
this_moment<-update(this_moment, hours = hour(now()), minutes = minute(now()))
this_moment
nyc<- now("America/New_York")
nyc
nyc+days(2)
depart<-nyc+days(2)
depart
depart<-update(depart,hour = 17, minnute = 34)
depart<-update(depart,hours = 17, minute s= 34)
depart<-update(depart,hours = 17, minutes= 34)
depart
arrive<= depart+hours(15)+minutes(50)
arrive<- depart+hours(15)+minutes(50)
?with_tz
with_tz("Asia/Hong_Kong")
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
interval()
?interval
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
setwd("D:/Data Science Coursera/Course 3/Week 4/Course Project/UCI HAR Dataset")
test<-read.table("/test/y_test.txt")
test<-read.table("./test/y_test.txt")
test
src(test)
str(test)
summary(test)
test<-read.table("./test/subject_train.txt")
test<-read.table("./test/subject_test.txt")
head(test)
summary(test)
str(test)
unique(test)
test2<-read.table("./train/subject_train.txt")
unique(test2)
dim(teest2)
dim(test2)
test3<-read.table("./train/X_train.txt")
dim(test3)
test4<-read.table("./train/Y_train.txt")
head(test4)
dim(test4)
heead(test3)
head(test3)
test5<-read.table("./train/Inertial Signals/body_acc_x_train.txt")
dim(test5)
summary(test3)
str(test3)
